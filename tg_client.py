import asyncio
from datetime import datetime
from hashlib import sha256
from http import HTTPStatus
from random import choice
from urllib.parse import urljoin

from aiogram import F
from aiogram.filters.command import Command
from aiogram.types import (CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup, Message)
from aiogram_forms import FormsManager
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from sqlalchemy import select
from sqlalchemy.ext.asyncio import async_sessionmaker

from telegram_client.config import BOT, DISPATCHER, get_keyboard
from telegram_client.constants import (BASE_URL, NOTIFICATIONS, PROFILE_URL,
                                       WORKOUT_SESSION_URL, WORKOUT_URL,
                                       WORKOUT_USER_URL)
from telegram_client.db import ENGINE, TelegramUser
from telegram_client.functions import (backend_delete, backend_get,
                                       backend_post, create_token, get_token)


@DISPATCHER.message(Command('start'))
async def start_message(message: Message):
    row = {
        'username': f'{message.from_user.id}',
        'password': sha256(f'{message.from_user.id}'.encode()).hexdigest()
    }
    async_session = async_sessionmaker(ENGINE, expire_on_commit=False)
    query = select(TelegramUser).where(
        TelegramUser.tg_user_id == message.from_user.id)
    async with async_session() as session:
        if not (await session.scalars(query)).one_or_none():
            row['token'] = await create_token(row)
            row['tg_user_id'] = message.from_user.id
            session.add(TelegramUser(**row))
            await session.commit()
            await message.answer(
                '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –í—ã –ø—Ä–æ—à–ª–∏ –Ω–∞—á–∞–ª—å–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n'
                '–ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, '
                '–Ω–æ –ø–æ–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ üòè\n'
                '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–æ–≤–∞—Ç—å—Å—è: /register'
            )
        else:
            await message.answer(
                '–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –Ω–∞—á–∞–ª—å–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é üòè\n'
                '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å: /register')


@DISPATCHER.callback_query(F.data == '/nutrition')
async def nutrilon_handler(callback: CallbackQuery):
    await callback.message.answer(
        'Callback `nutrition` function.')


@DISPATCHER.callback_query(F.data == '/sleep')
async def sleep_handler(callback: CallbackQuery):
    await callback.message.answer(
        'Callback `sleep` function.')


@DISPATCHER.callback_query(F.data == '/workout')
async def workout_handler(callback: CallbackQuery):
    user_token = await get_token(callback.from_user.id)
    program_details = await backend_get(WORKOUT_USER_URL, user_token)
    if HTTPStatus.NOT_FOUND == program_details.status:
        await callback.message.answer(
            '–£–≤—ã, –Ω–∞ –≤–∞—à—ã –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω –∫–æ–ø–ª–µ–∫—Å —É–ø—Ä–∞–∂–¥–µ–Ω–∏–π ü•∫')
    elif not isinstance(program_details, dict):
        program_details = await program_details.json()
        if 'program_details' in program_details.keys():
            buttons = []
            descriptions = []
            counter = 1
            for item in program_details['program_details']:
                workout = await backend_get(
                    urljoin(WORKOUT_URL, str(item['workout_id'])),
                    user_token)
                if not isinstance(workout, dict):
                    workout = await workout.json()
                    buttons.append(
                        [InlineKeyboardButton(
                            text=item['workout_title'],
                            callback_data=(
                                f'train_{workout["workout_type"]}-'
                                f'{item["workout_id"]}'))])
                    descriptions.append(
                        f'*{counter}. '
                        f'{item["workout_title"]}*\n'
                        f'{workout["description"]}\n')
                counter += 1

            descriptions = '\n'.join(descriptions)
            message = (
                '–ò—Å—Ö–æ–¥—è –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è, '
                '–º–æ–∂–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n'
                f'{descriptions}\n'
                '–ù–∞—á–Ω–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É? üòè '
                '–í—ã–±–∏—Ä–∞–π—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏ –ø—Ä–∏—Å—Ç—É–ø–∞–µ–º!')
            await callback.message.answer(
                message,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
                parse_mode='Markdown')
    else:
        await callback.message.answer(
            '–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–æ–¥–æ–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ.')


@DISPATCHER.callback_query(F.data.startswith('train_'))
async def train_handler(callback: CallbackQuery):
    workout_data = callback.data.split('_')[-1].split('-')
    workout_type, workout_id = workout_data[0], workout_data[-1]
    user_token = await get_token(callback.from_user.id)
    workout = await backend_get(urljoin(WORKOUT_URL, workout_id), user_token)
    program_details = await backend_get(WORKOUT_USER_URL, user_token)
    if not isinstance(workout, dict) and not isinstance(program_details, dict):
        workout = await workout.json()
        program_details = (await program_details.json())['program_details']
        data = [
            item for item in program_details
            if item['workout_id'] == int(workout_id)
        ][0]
        buttons = [
            InlineKeyboardButton(
                text='–ù–∞—á–∞—Ç—å',
                callback_data=f'session_start_{workout_type}-{workout_id}'),
            InlineKeyboardButton(
                text='–ó–∞–∫–æ–Ω—á–∏—Ç—å',
                callback_data=f'session_end_{workout_type}-{workout_id}'),
        ]
        message = (
            f'{workout["title"]}\n'
            f'{workout["description"]}\n\n'
            '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –∑–∞ 1 –ø–æ–¥—Ö–æ–¥: '
            f'{data["repetitions"]}\n'
            f'–í—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–æ–≤: {data["sets"]}\n'
            '–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è: '
            f'{data["duration"]} –º–∏–Ω—É—Ç.\n'
        )
        if workout['video']:
            link = urljoin(BASE_URL, workout["video"])
            message = f'{message}\n–í–∏–¥–µ–æ —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ–º:\n{link}'
        await callback.message.answer(
            message,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[buttons]),
            link_preview_options={'is_disabled': False})
    else:
        await callback.message.answer(
            '–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–æ–¥–æ–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ.')


@DISPATCHER.callback_query(F.data.startswith('session_'))
async def workout_session_handler(callback: CallbackQuery):
    user_token = await get_token(callback.from_user.id)
    workouts = await backend_get(WORKOUT_SESSION_URL, user_token)
    if not isinstance(workouts, dict):
        workouts = await workouts.json()
        data = callback.data.split('_')
        session = data[1]
        workout_data = data[-1].split('-')
        workout_type, workout_id = workout_data[0], workout_data[1]
        if session == 'start' and not workouts:
            body = {
                'workout_type': workout_type,
                'current_workout': workout_id
            }
            start = await backend_post(
                WORKOUT_SESSION_URL,
                user_token,
                body)
            if not isinstance(start, dict):
                await callback.message.answer('üöÄ–ü–æ–µ—Ö–∞–ª–∏!üöÄ')
        elif session == 'end' and workouts:
            time = datetime.strptime(
                workouts[0]['timestamp'].split('.')[0], '%Y-%m-%dT%H:%M:%S')
            delete = await backend_delete(
                urljoin(WORKOUT_SESSION_URL, str(workouts[0]['id'])),
                user_token)
            if delete.status == HTTPStatus.NO_CONTENT:
                time = str(datetime.now() - time).split('.', maxsplit=1)[0]
                await callback.message.answer(
                    '–§—É—ÖüòÆ‚Äçüí®\n–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –∑–∞ '
                    f'{time}.\n–ü—Ä–æ–¥–æ–ª–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ –ø–æ–π–¥–µ–º –ø–æ–µ–¥–∏–º? üòâ',
                    reply_markup=get_keyboard()
                )
        elif workouts:
            await callback.message.answer(
                '–ï—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ!üòà')
        elif not workouts:
            await callback.message.answer('–ú—ã –µ—â–µ –¥–∞–∂–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏!üëÄ')
    else:
        await callback.message.answer(
            '–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–æ–¥–æ–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ.')


@DISPATCHER.callback_query(F.data == '/renew')
async def renew_handler(callback: CallbackQuery):
    await callback.message.answer(
        '–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–∏—Ç–µ \n/renew üòè')


@DISPATCHER.message(Command('renew'))
async def command_renew(message: Message, forms: FormsManager):
    await message.answer('–î–∞–≤–∞–π—Ç–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.')
    await forms.show('training')


@DISPATCHER.message(Command('register'))
async def command_register(message: Message, forms: FormsManager):
    user_token = await get_token(message.from_user.id)
    status = await backend_get(PROFILE_URL, user_token)
    if not isinstance(status, dict):
        if status.status == HTTPStatus.OK:
            await message.answer(
                '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã. '
                '–í–µ—Ä–æ—è—Ç–Ω–æ, –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –º–æ–≥—É—Ç –≤–∞–º –ø–æ–º–æ—á—å ü§´',
                reply_markup=get_keyboard())
        elif status.status == HTTPStatus.NOT_FOUND:
            await message.answer('–î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä—É–µ–º—Å—è!')
            await forms.show('registration')
        else:
            await message.answer(
                '–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.\n'
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–æ–¥–æ–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ.')
    else:
        await message.answer(
            '–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–æ–¥–æ–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ.')


async def test(chat_id: int):
    '''
    –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–æ–º.
    '''
    await BOT.send_message(chat_id, choice(NOTIFICATIONS))


async def test_2(user: TelegramUser):
    '''
    –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–æ–º.
    '''
    data = await backend_get(PROFILE_URL, user.token)
    if not isinstance(data, dict):
        name = (await data.json())['name']
        message = f'–í–∞–º, {name}, –ø–æ—Ä–∞ –ø–æ–∑–∞–Ω–∏–º–∞—Ç—å—Å—è!'
        await BOT.send_message(user.tg_user_id, message)


async def main():
    scheduler = AsyncIOScheduler()
    async with async_sessionmaker(ENGINE, expire_on_commit=False)() as session:
        users = (await session.scalars(select(TelegramUser))).all()
    # –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø –†–ê–ó –í –ß–ê–°
    scheduler.add_job(test, 'interval', hours=1, args=(117508330,))
    # –û–¢–ü–†–ê–í–ö–ê –í–°–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú –†–ê–ó –í 2 –ß–ê–°–ê –†–ê–ó–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô
    for user in users:
        scheduler.add_job(test_2, 'interval', hours=2, args=(user, ))
    scheduler.start()
    await DISPATCHER.start_polling(BOT)


if __name__ == '__main__':
    asyncio.run(main())
