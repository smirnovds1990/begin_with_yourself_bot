import asyncio
from hashlib import sha256
from http import HTTPStatus
from random import choice

from aiogram import F
from aiogram.filters.command import Command
from aiogram.types import CallbackQuery, Message
from aiogram_forms import FormsManager
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from sqlalchemy import select
from sqlalchemy.ext.asyncio import async_sessionmaker

from telegram_client.config import BOT, DISPATCHER, get_keyboard
from telegram_client.constants import NOTIFICATIONS, PROFILE_URL
from telegram_client.db import ENGINE, TelegramUser
from telegram_client.functions import (
    backend_get,
    create_token,
    get_token,
    create_sleep,
    get_last_sleep,
)


@DISPATCHER.message(Command('start'))
async def start_message(message: Message):
    row = {
        'username': f'{message.from_user.id}',
        'password': sha256(f'{message.from_user.id}'.encode()).hexdigest()
    }
    async_session = async_sessionmaker(ENGINE, expire_on_commit=False)
    query = select(TelegramUser).where(
        TelegramUser.tg_user_id == message.from_user.id)
    async with async_session() as session:
        if not (await session.scalars(query)).one_or_none():
            row['token'] = await create_token(row)
            row['tg_user_id'] = message.from_user.id
            session.add(TelegramUser(**row))
            await session.commit()
            await message.answer(
                '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –í—ã –ø—Ä–æ—à–ª–∏ –Ω–∞—á–∞–ª—å–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n'
                '–ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, '
                '–Ω–æ –ø–æ–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ üòè\n'
                '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–æ–≤–∞—Ç—å—Å—è: /register'
            )
        else:
            await message.answer(
                '–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –Ω–∞—á–∞–ª—å–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é üòè\n'
                '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å: /register')


@DISPATCHER.callback_query(F.data == '/nutrition')
async def nutrilon_handler(callback: CallbackQuery):
    await callback.message.answer('/nutrition handler message.')


@DISPATCHER.callback_query(F.data == '/sleep')
async def sleep_handler(callback: CallbackQuery):
    await callback.message.answer('/sleep handler message.')


@DISPATCHER.callback_query(F.data == '/workout')
async def workout_handler(callback: CallbackQuery):
    await callback.message.answer('/workout handler message.')


@DISPATCHER.callback_query(F.data == '/renew')
async def renew_handler(callback: CallbackQuery):
    await callback.message.answer(
        '–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–∏—Ç–µ \n/renew üòè')


@DISPATCHER.message(Command('renew'))
async def command_renew(message: Message, forms: FormsManager):
    await message.answer('–î–∞–≤–∞–π—Ç–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.')
    await forms.show('training')


@DISPATCHER.message(Command('register'))
async def command_register(message: Message, forms: FormsManager):
    user_token = await get_token(message.from_user.id)
    status = await backend_get(PROFILE_URL, user_token)
    if not isinstance(status, dict):
        if status.status_code == HTTPStatus.OK:
            await message.answer(
                '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã. '
                '–í–µ—Ä–æ—è—Ç–Ω–æ, –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –º–æ–≥—É—Ç –≤–∞–º –ø–æ–º–æ—á—å ü§´',
                reply_markup=get_keyboard())
        elif status.status_code == HTTPStatus.NOT_FOUND:
            await message.answer('–î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä—É–µ–º—Å—è!')
            await forms.show('registration')
        else:
            await message.answer(
                '–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.\n'
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–æ–¥–æ–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ.')
    else:
        await message.answer(
            '–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–æ–¥–æ–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ.')


@DISPATCHER.message(Command('sleep'))
async def start_sleep(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è /sleep."""
    await create_sleep(message.from_user.id)
    await message.answer("–ü—Ä–∏—è—Ç–Ω—ã—Ö —Å–Ω–æ–≤!")


@DISPATCHER.message(Command('wake_up'))
async def start_wake_up(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è /wake_up."""
    await create_sleep(message.from_user.id, is_sleeping=False)
    response = await get_last_sleep(message.from_user.id)
    sleeping_hours = response.get('sleeping_hours')
    sleep_status = response.get('sleep_status')
    await message.answer(f'–í—ã —Å–ø–∞–ª–∏ {sleeping_hours} —á–∞—Å–æ–≤. {sleep_status}.')


async def test(chat_id: int):
    '''
    –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–æ–º.
    '''
    await BOT.send_message(chat_id, choice(NOTIFICATIONS))


async def test_2(user: TelegramUser):
    '''
    –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–æ–º.
    '''
    data = await backend_get(PROFILE_URL, user.token)
    if not isinstance(data, dict):
        name = data.json()['name']
        message = f'–í–∞–º, {name}, –ø–æ—Ä–∞ –ø–æ–∑–∞–Ω–∏–º–∞—Ç—å—Å—è!'
        await BOT.send_message(user.tg_user_id, message)


async def main():
    scheduler = AsyncIOScheduler()
    async with async_sessionmaker(ENGINE, expire_on_commit=False)() as session:
        users = (await session.scalars(select(TelegramUser))).all()
    # –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø –†–ê–ó –í –ß–ê–°
    scheduler.add_job(test, 'interval', hours=1, args=(117508330,))
    # –û–¢–ü–†–ê–í–ö–ê –í–°–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú –†–ê–ó –í 2 –ß–ê–°–ê –†–ê–ó–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô
    for user in users:
        scheduler.add_job(test_2, 'interval', hours=2, args=(user, ))
    scheduler.start()
    await DISPATCHER.start_polling(BOT)


if __name__ == '__main__':
    asyncio.run(main())
